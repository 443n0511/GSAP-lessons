{"version":3,"sources":["api/api.js","theme/font.js","theme/theme.js","components/ImageContents.js","components/Main.js","components/Header.js","components/Contents.js","components/Loading.js","App.js","index.js"],"names":["breed","number","a","fetch","response","json","data","message","Fonts","styles","theme","extendTheme","global","body","backgroundColor","color","fonts","heading","gsap","registerPlugin","ScrollTrigger","ImageContents","memo","index","url","box","useRef","direction","childrenText","useEffect","toRight","x","autoAlpha","duration","scrollTrigger","trigger","current","start","toLeft","fromTo","y","delay","ease","bgImage","backgroundAttachment","w","h","backgroundSize","backgroundPosition","position","_before","top","right","bottom","left","content","alignItems","justifyContent","ref","base","md","flexDirection","as","objectFit","my","src","alt","maxHeight","fontSize","fontWeight","Main","urls","map","Header","p","React","createRef","to","backgroundImage","opacity","backgroundClip","bgGradient","textAlign","Contents","Loading","bgColor","type","height","width","App","useState","setUrls","isLoading","setIsloading","fetchImages","then","setTimeout","render","document","getElementById"],"mappings":"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","file":"static/js/main.a1bd4ad4.chunk.js","sourcesContent":["export async function fetchImages(breed, number) {\n  const response = await fetch(\n    `https://dog.ceo/api/breed/${breed}/images/random/${number}`\n  );\n  const data = await response.json();\n  return data.message;\n}\n","import { Global } from \"@emotion/react\";\n\nconst Fonts = () => (\n  <Global\n    styles={`\n      /* latin */\n      @font-face {\n        font-family: 'Heading Font Name';\n        font-style: normal;\n        font-weight: 700;\n        font-display: swap;\n        src: url('./fonts/headingfont.woff2') format('woff2'), url('./fonts/headingfont.woff') format('woff');\n        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n      }\n      /* latin */\n      @font-face {\n        font-family: 'Body Font Name';\n        font-style: normal;\n        font-weight: 400;\n        font-display: swap;\n        src: url('./fonts/bodyfont.woff2') format('woff2'), url('./fonts/bodyfont.woff') format('woff');\n        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n      }\n      `}\n  />\n);\n\nexport default Fonts;\n","import { extendTheme } from \"@chakra-ui/react\";\nexport const theme = extendTheme({\n  styles: {\n    global: {\n      body: {\n        backgroundColor: \"white\",\n        color: \"gray.900\",\n      },\n    },\n  },\n  fonts: {\n    heading: \"Heading Font Name\",\n    body: \"Body Font Name\",\n  },\n});\n","import { useRef, useEffect, memo } from \"react\";\nimport { gsap } from \"gsap\";\nimport { Image, Center, Text, Flex, Spacer } from \"@chakra-ui/react\";\nimport { ScrollTrigger } from \"gsap/ScrollTrigger\";\n\ngsap.registerPlugin(ScrollTrigger);\n\nexport const ImageContents = memo(({ index, url }) => {\n  const box = useRef(null);\n  const message = useRef(null);\n  const direction = index % 2 === 0 ? \"row-reverse\" : \"row\";\n  const childrenText = index % 2 === 0 ? \"From right\" : \"From left\";\n  useEffect(() => {\n    const toRight = [\n      { x: -60, autoAlpha: 0 },\n      {\n        x: 0,\n        duration: 1.5,\n        autoAlpha: 1,\n        scrollTrigger: {\n          trigger: box.current,\n          start: \"bottom bottom\",\n        },\n      },\n    ];\n    const toLeft = [\n      {\n        x: 60,\n        autoAlpha: 0,\n      },\n      {\n        x: 0,\n        duration: 2,\n        autoAlpha: 1,\n        scrollTrigger: {\n          trigger: box.current,\n          start: \"bottom bottom\",\n        },\n      },\n    ];\n\n    index % 2 === 0\n      ? gsap.fromTo(box.current, ...toRight)\n      : gsap.fromTo(box.current, ...toLeft);\n\n    gsap.fromTo(\n      message.current,\n      {\n        y: 200,\n        autoAlpha: 0,\n      },\n      {\n        y: 0,\n        delay: 0.5,\n        ease: \"bounce.out\",\n        autoAlpha: 1,\n        scrollTrigger: {\n          trigger: box.current,\n          start: \"bottom bottom\",\n        },\n      }\n    );\n  });\n  return (\n    <>\n      <Flex\n        bgImage={url}\n        backgroundAttachment='fixed'\n        w='100%'\n        h='100vh'\n        color='white'\n        backgroundSize='cover'\n        backgroundPosition='center'\n        position='relative'\n        _before={{\n          backgroundColor: \"rgba(0, 0, 0, 0.4)\",\n          position: \"absolute\",\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0,\n          content: `\"\"`,\n        }}\n        alignItems='center'\n        justifyContent='center'>\n        <Flex\n          ref={box}\n          w={{ base: \"60%\", md: \"70%\" }}\n          alignItems='center'\n          justifyContent='center'\n          flexDirection={{ base: \"column\", md: direction }}>\n          <Image\n            as='img'\n            objectFit='cover'\n            my='auto'\n            src={url}\n            alt='cute dog'\n            w={{ base: \"100%\", md: \"50%\" }}\n            maxHeight={800}\n          />\n          <Center w='100%'>\n            <Text\n              ref={message}\n              fontSize={{ base: \"3xl\", md: \"6xl\" }}\n              fontWeight='900'>\n              {`${childrenText}üê∂`}\n            </Text>\n          </Center>\n        </Flex>\n      </Flex>\n    </>\n  );\n});\n","import { memo } from \"react\";\nimport { ImageContents } from \"./ImageContents\";\nexport const Main = memo(({ urls }) => {\n  return (\n    <main>\n      {urls &&\n        urls.map((url, index) => {\n          return <ImageContents key={url} index={index} url={url} />;\n        })}\n    </main>\n  );\n});\n","import React, { useEffect, memo } from \"react\";\nimport { Center, Text, Flex } from \"@chakra-ui/react\";\nimport { gsap } from \"gsap\";\n\nexport const Header = memo(() => {\n  const p = React.createRef();\n\n  useEffect(() => {\n    gsap.to(p.current, {\n      backgroundImage: \"linear-gradient(to left, #30CFD0, #330867)\",\n      duration: 3,\n      opacity: 1,\n    });\n  }, [p]);\n  return (\n    <Flex w='100%' h='100vh' justifyContent='center' alignItems='center'>\n      <Center\n        ref={p}\n        as='header'\n        fontSize='6vw'\n        backgroundClip='text'\n        bgGradient='linear(to-l, #7928CA, #FF0080)'\n        fontWeight='900'\n        opacity='0'>\n        <Text as='p' textAlign='center'>\n          React ChakraUI GSAP\n          <br />\n          Dog images are retrieved\n          <br /> from Dog API\n        </Text>\n      </Center>\n    </Flex>\n  );\n});\n","import { memo } from \"react\";\nimport { Main } from \"./Main\";\nimport { Header } from \"./Header\";\nexport const Contents = memo(({ urls }) => {\n  return (\n    <>\n      <Header />\n      <Main urls={urls} />\n    </>\n  );\n});\n","import React, { useEffect, memo } from \"react\";\nimport { Center, Text } from \"@chakra-ui/react\";\nimport { gsap } from \"gsap\";\nimport Loader from \"react-loader-spinner\";\n\nexport const Loading = memo(() => {\n  return (\n    <Center\n      as='header'\n      h='100vh'\n      bgColor='blue.900'\n      w='100vw'\n      fontSize='6vw'\n      fontWeight='900'>\n      <Loader type='Bars' color='#30CFD0' height={100} width={100} />\n    </Center>\n  );\n});\n","import { ChakraProvider } from \"@chakra-ui/react\";\nimport { useEffect, useState } from \"react\";\nimport { fetchImages } from \"./api/api\";\nimport Fonts from \"./theme/font\";\nimport { theme } from \"./theme/theme\";\nimport { Contents } from \"./components/Contents\";\nimport { Loading } from \"./components/Loading\";\n\nfunction App() {\n  const [urls, setUrls] = useState(null);\n  const [isLoading, setIsloading] = useState(true);\n  useEffect(() => {\n    fetchImages(\"shiba\", 4).then((urls) => {\n      setUrls(urls);\n      setTimeout(() => setIsloading(false), 1000);\n    });\n  }, []);\n  if (isLoading)\n    return (\n      <ChakraProvider theme={theme}>\n        <Fonts />\n        <Loading />\n      </ChakraProvider>\n    );\n  return (\n    <ChakraProvider theme={theme}>\n      <Fonts />\n      <Contents urls={urls} />\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import { render } from \"react-dom\";\nimport App from \"./App\";\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}